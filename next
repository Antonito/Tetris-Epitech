src/check_args.c:  if (!(game->keys = set_keys_default(game->keys)))
src/check_args.c:  game->level = 1;
src/check_args.c:  game->next = 0;
src/check_args.c:  game->line = 0;
src/check_args.c:  game->highscore = 0;
src/check_args.c:  game->score = 0;
src/check_args.c:  game->time_sec = 0;
src/check_args.c:  game->time_min = 0;
src/check_args.c:  game->height = 20;
src/check_args.c:  game->width = 10;
src/check_args.c:  game->debug = false;
src/check_args.c:  game->showNext = true;
src/check_args.c:  game->running = true;
src/display.c:	create_new_win(next->height + 2, next->width + 4, 1, game->width + 36)))
src/main.c:  game->time_min = current / 60;
src/main.c:  game->time_sec = current % 60;
src/main.c:  if (game->debug && debugMode(game, loop->tetri, term))
src/main.c:    return (free(loop->events), free2DArray(game->arr), endwin(), 1);
src/main.c:    if (!my_strncmp(loop->buff, game->keys[loop->i],
src/main.c:	  return (free(loop->events), free2DArray(game->arr), 1);
src/main.c:	  return (free(loop->events), free2DArray(game->arr), 2);
src/main.c:      else if (checkPause(&game->running, game->keys, loop.win.score, &start),
src/score.c:  mvwprintw(score, 2, 22, "%d", game->highscore);
src/score.c:  mvwprintw(score, 3, 22, "%d", game->score);
src/score.c:  mvwprintw(score, 5, 22, "%d", game->line);
src/score.c:  mvwprintw(score, 6, 22, "%d", game->level);
src/score.c:  mvwprintw(score, 8, 18, "%d : %d", game->time_min, game->time_sec);
src/init_game.c:      !(game->arr = malloc_tab(game->arr, game->height, game->width)))
src/init_game.c:	create_new_board(game->height + 2, game->width + 2, 1, 32)))
src/load.c:  if (getInfos(fd, tetri, game->width, game->height))
src/check_end.c:  while (++i < game->width)
src/check_end.c:      if (game->arr[0][i] > -1)
src/check_line.c:      while (++i < game->width)
src/check_line.c:	game->arr[index][i] = game->arr[index - 1][i];
src/check_line.c:  while (++i < game->width)
src/check_line.c:    game->arr[0][i] = -1;
src/check_line.c:  while (++i < game->width)
src/check_line.c:    if (game->arr[index][i] < 0)
src/check_line.c:  while (++i < game->width)
src/check_line.c:    game->arr[index][i] = -1;
src/check_line.c:  i = tetri[game->cur].y - 1;
src/check_line.c:  while (++i < tetri[game->cur].y + tetri[game->cur].height)
src/debug.c:      writeKey(game->keys[LEFT]) < 0 ||
src/debug.c:      writeKey(game->keys[RIGHT]) < 0 ||
src/debug.c:      writeKey(game->keys[TURN]) < 0 ||
src/debug.c:      writeKey(game->keys[DROP]) < 0 ||
src/debug.c:      writeKey(game->keys[QUIT]) < 0 ||
src/debug.c:      writeKey(game->keys[PAUSE]) < 0)
src/debug.c:      ((game->showNext) ? write(1, "Yes\n", 4) : write(1, "No\n", 3)) < 0 ||
src/debug.c:      my_put_nbr((int)game->level) < 0 || write(1, "\n", 1) < 0 ||
src/debug.c:      write(1, "Size : ", 7) < 0 || my_put_nbr(game->height) < 0 ||
src/debug.c:      write(1, "*", 1) < 0 || my_put_nbr(game->width) < 0 ||
src/events/game.c:  game->running = ((game->running) ? false : true);
src/events/move.c:  clean_tetri(&tetri[game->cur], game, tetri[game->cur].x, tetri[game->cur].y);
src/events/move.c:  if (check_print_tetri(&tetri[game->cur], game,
src/events/move.c:			tetri[game->cur].x - 1, tetri[game->cur].y))
src/events/move.c:  tetri[game->cur].x -= 1;
src/events/move.c:  print_tetri(&tetri[game->cur], game, tetri[game->cur].x, tetri[game->cur].y);
src/events/move.c:  clean_tetri(&tetri[game->cur], game, tetri[game->cur].x, tetri[game->cur].y);
src/events/move.c:  if (check_print_tetri(&tetri[game->cur], game,
src/events/move.c:			tetri[game->cur].x + 1, tetri[game->cur].y))
src/events/move.c:  tetri[game->cur].x += 1;
src/events/move.c:  print_tetri(&tetri[game->cur], game, tetri[game->cur].x, tetri[game->cur].y);
src/events/move.c:  clean_tetri(&tetri[game->cur], game, tetri[game->cur].x, tetri[game->cur].y);
src/events/move.c:  while (check_print_tetri(&tetri[game->cur], game,
src/events/move.c:			   tetri[game->cur].x, tetri[game->cur].y + i))
src/events/move.c:  tetri[game->cur].y += i;
src/events/move.c:  print_tetri(&tetri[game->cur], game, tetri[game->cur].x, tetri[game->cur].y);
src/board.c:  display_tetriminos(win->board, game->arr, game->width);
src/board.c:  if (!game->next)
src/args/keysTD.c:      if (!av[1] || !(game->keys[TURN] = my_strdup(av[1])))
src/args/keysTD.c:	  !(game->keys[TURN] = my_strdup(av[0] + 11)))
src/args/keysTD.c:      if (!av[1] || !(game->keys[DROP] = my_strdup(av[1])))
src/args/keysTD.c:	  !(game->keys[DROP] = my_strdup(av[0] + 11)))
src/args/size.c:  game->height = row;
src/args/size.c:  game->width = col;
src/args/level.c:    game->level = value;
src/args/debug.c:  game->debug = true;
src/args/keysQP.c:      if (!av[1] || !(game->keys[QUIT] = my_strdup(av[1])))
src/args/keysQP.c:	  !(game->keys[QUIT] = my_strdup(av[0] + 11)))
src/args/keysQP.c:      if (!av[1] || !(game->keys[PAUSE] = my_strdup(av[1])))
src/args/keysQP.c:	  !(game->keys[PAUSE] = my_strdup(av[0] + 12)))
src/args/next.c:  game->next = false;
src/args/keysLR.c:      if (!av[1] || !(game->keys[LEFT] = my_strdup(av[1])))
src/args/keysLR.c:	  !(game->keys[LEFT] = my_strdup(av[0] + 11)))
src/args/keysLR.c:      if (!av[1] || !(game->keys[RIGHT] = my_strdup(av[1])))
src/args/keysLR.c:	  !(game->keys[RIGHT] = my_strdup(av[0] + 12)))
src/add_tetri.c:  while (++i < tetri->height && y < game->height)
src/add_tetri.c:      while (++j < tetri->width && x < game->width)
src/add_tetri.c:	  if (tetri->arr[i][j] == tetri->color  && game->arr[y][x] > -1)
src/add_tetri.c:	    game->arr[y][x] = tetri->color;
src/add_tetri.c:	    game->arr[y][x] = -1;
src/add_tetri.c:  game->cur = random_tetri(tetri);
src/add_tetri.c:  tetri[game->cur].x = (game->width / 2) - (tetri[game->cur].width / 2) - 1 ;
src/add_tetri.c:  tetri[game->cur].y = 1;
src/add_tetri.c:  if (check_print_tetri(&tetri[game->cur], game,
src/add_tetri.c:			tetri[game->cur].x, tetri[game->cur].y))
src/add_tetri.c:  print_tetri(&tetri[game->cur], game, tetri[game->cur].x, tetri[game->cur].y);
src/add_tetri.c:  clean_tetri(&tetri[game->cur], game, tetri[game->cur].x, tetri[game->cur].y);
src/add_tetri.c:  if (check_print_tetri(&tetri[game->cur], game,
src/add_tetri.c:  			tetri[game->cur].x, tetri[game->cur].y + 1))
src/add_tetri.c:  tetri[game->cur].y += 1;
src/add_tetri.c:  print_tetri(&tetri[game->cur], game, tetri[game->cur].x, tetri[game->cur].y);
